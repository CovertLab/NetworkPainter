<?xml version="1.0" encoding="utf-8"?>
<!---
Simplified version of application which only displays a network with experiment
data loaded. Does not allow user to edit network. Doesn't have any functionality
for loading a network from a database or saving a network to a database. Displays
the hard-coded network in data.Network and experiment in data.Experiment. Also
doesn't have menu or full toolbars. No form view. Toolbars are hidden by default, 
and revealed on mouse over. Doesn't not require network access. Suitabled for
embedding into websites, powerpoint, etc.

<p>Has the following features:
<ul>zooming, panning
<li>fullscreen</li>
<li>animation play, pause, stop controls</li>
<li>animation timeline</li>
<li>about window contained metadata about the network and experiment loaded compiled
    with the viewer and the application that created the viewer.</li>
</ul></p>

@see edu.stanford.covertlab.networkpainter.viewer.AboutWindow
	
@author Jonathan Karr, jkarr@stanford.edu
@affiliation Covert Lab, Department of Bioengineering, Stanford University
@lastupdated 3/23/2009
-->
<mx:Application 
	xmlns:controls="edu.stanford.covertlab.controls.*"
	xmlns:diagram_core="edu.stanford.covertlab.diagram.core.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
    width="100%" height="100%" 
    horizontalScrollPolicy="off" verticalScrollPolicy="off"
    preloader="edu.stanford.covertlab.networkpainter.preloader.Preloader"
	preinitialize="preinitializeHandler(event);"
	creationComplete="diagram.completeInitialization();creationCompleteHandler(event);"
	applicationComplete="applicationCompleteHandler(event);">

    <!-- style -->
    <mx:Style source="edu/stanford/covertlab/style/silver.css"/>

    <!-- script -->
    <mx:Script>
	<![CDATA[
		[Embed(source = "viewer/data/Network.json", mimeType = "application/octet-stream")] private var Network:Class;
		[Embed(source = "viewer/data/Experiment.json", mimeType = "application/octet-stream")] private var Experiment:Class;		
		
		import adobe.utils.CustomActions;
		import com.adobe.serialization.json.JSON;
		import edu.stanford.covertlab.diagram.event.DiagramEvent;
		import edu.stanford.covertlab.networkpainter.data.AboutData;
		import edu.stanford.covertlab.window.AboutWindow;
		import flash.events.Event;
		import flash.events.FullScreenEvent;
		import flash.events.KeyboardEvent;
		import flash.utils.ByteArray;
		import mx.collections.ArrayCollection;
		import mx.events.FlexEvent;
		
		//data
		public var aboutData:Object;
		
		//popup window
		public var aboutWindow:AboutWindow;
		
		//fullscreen
		private var nonFullScreenWidth:Number;
		private var nonFullScreenHeight:Number;		

		/*************************************************************
		 * initialization
		 ************************************************************/
		private function preinitializeHandler(event:FlexEvent):void {
		}
		 
		private function creationCompleteHandler(event:FlexEvent):void {
			//data
			aboutData = new AboutData();			
			
			//page title
			pageTitle = aboutData.applicationName;
		}
		
		private function applicationCompleteHandler(event:FlexEvent):void {
			var i:uint;
			var tmp:ByteArray;
			
			//setup key bindings
			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);
			
			//fullscreen
			stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
								
			//turn off diagram editing, set full screen mode to true
			diagram.editingEnabled = false;
			diagram.fullScreenMode = true;
			diagram.disableOverview();
			
			//load network
			tmp = new Network();
			var network:Object = JSON.decode(tmp.readUTFBytes(tmp.length));
			network.biomoleculestyles = new ArrayCollection(network.biomoleculestyles);
			network.compartments = new ArrayCollection(network.compartments);
			network.biomolecules = new ArrayCollection(network.biomolecules);
			network.edges = new ArrayCollection(network.edges);
			network.animationFrameRate = network.exportAnimationFrameRate;
			network.loopAnimation = network.exportLoopAnimation;
			network.dimAnimation = network.exportDimAnimation;
			diagram.loadNetwork(network);			
			
			tmp = new Experiment();
			var experiment:Object = JSON.decode(tmp.readUTFBytes(tmp.length));
			for (i = 0; i < experiment.biomoleculeAssociations.length; i++) {
				experiment.biomoleculeAssociations[i]['biomolecule'] = diagram.biomolecules.getItemAt(experiment.biomoleculeAssociations[i]['biomoleculeid']);
			}
			
			diagram.loadMeasurement(
				experiment.biomoleculeAssociations, 
				experiment.animationAxis, 
				experiment.comparisonXAxis,
				experiment.comparisonYAxis,
				experiment.measurement, 
				true);
				
			diagram.zoomFit( -1, -1, 0);
			
			//popup windows
			aboutWindow = new AboutWindow(this, aboutData);
		}
		
		/*************************************************************
		 * key binding
		 ************************************************************/
		//Note: flash security blocks key events except escape in fullscreen mode
		private function keyDown( event:KeyboardEvent ):void
		{		
			//alt key pressed
			if (event.altKey) return;
			
			//shift and control keys pressed
			if (event.shiftKey && event.ctrlKey) return;
			
			//control key pressed
			if (event.ctrlKey) {
				switch(event.charCode) {
					case '='.charCodeAt(): diagram.zoomIn(); break;
					case '-'.charCodeAt(): diagram.zoomOut(); break;
					case '0'.charCodeAt(): diagram.zoomReset(); break;
				}
				return;
			}
			
			//control, shift, alt keys not pressed
			switch(event.keyCode) {
				case Keyboard.F11: toggleFullScreen(); break;
			}
		}
		
		/*************************************************************
		 * fullscreen mode
		 ************************************************************/
		private function toggleFullScreen():void {
			if (stage.displayState == StageDisplayState.NORMAL) {
				stage.displayState = StageDisplayState.FULL_SCREEN;					
			}
			else stage.displayState = StageDisplayState.NORMAL;
			
			//colorScale.x = diagram.width - colorScale.width - 4;
			//colorScale.y = 4;
		}
		
		private function fullScreenHandler(event:FullScreenEvent):void {
			diagram.fullScreen = event.fullScreen;
			diagram.fullScreenMode = true;
		}		
	]]>
	</mx:Script>

	<mx:Canvas width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
		<diagram_core:Diagram id="diagram" />
		<controls:StatusBar id="statusBar" />
	</mx:Canvas>
</mx:Application>